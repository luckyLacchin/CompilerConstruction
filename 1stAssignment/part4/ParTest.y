-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParTest
  ( happyError
  , myLexer
  , pProgram
  , pListDef
  , pDef
  , pListArg
  , pArg
  , pStm
  , pElse
  , pListStm
  , pExp15
  , pExp14
  , pExp12
  , pExp11
  , pExp10
  , pExp8
  , pExp2
  , pListExp
  , pExp
  , pExp1
  , pExp3
  , pExp4
  , pExp5
  , pExp6
  , pExp7
  , pExp9
  , pExp13
  , pQualConst
  , pTemplateInst
  , pListType
  , pType
  , pLiteral
  , pListId
  ) where

import Prelude

import qualified AbsTest
import LexTest

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pArg Arg
%name pStm Stm
%name pElse Else
%name pListStm ListStm
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp8 Exp8
%name pExp2 Exp2
%name pListExp ListExp
%name pExp Exp
%name pExp1 Exp1
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp9 Exp9
%name pExp13 Exp13
%name pQualConst QualConst
%name pTemplateInst TemplateInst
%name pListType ListType
%name pType Type
%name pLiteral Literal
%name pListId ListId
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!='      { PT _ (TS _ 1)     }
  '%'       { PT _ (TS _ 2)     }
  '&'       { PT _ (TS _ 3)     }
  '('       { PT _ (TS _ 4)     }
  ')'       { PT _ (TS _ 5)     }
  '*'       { PT _ (TS _ 6)     }
  '+'       { PT _ (TS _ 7)     }
  '+='      { PT _ (TS _ 8)     }
  ','       { PT _ (TS _ 9)     }
  '-'       { PT _ (TS _ 10)    }
  '-='      { PT _ (TS _ 11)    }
  '->'      { PT _ (TS _ 12)    }
  '.'       { PT _ (TS _ 13)    }
  '/'       { PT _ (TS _ 14)    }
  ':'       { PT _ (TS _ 15)    }
  '::'      { PT _ (TS _ 16)    }
  ';'       { PT _ (TS _ 17)    }
  '<'       { PT _ (TS _ 18)    }
  '<<'      { PT _ (TS _ 19)    }
  '='       { PT _ (TS _ 20)    }
  '=='      { PT _ (TS _ 21)    }
  '>'       { PT _ (TS _ 22)    }
  '>>'      { PT _ (TS _ 23)    }
  '?'       { PT _ (TS _ 24)    }
  '['       { PT _ (TS _ 25)    }
  ']'       { PT _ (TS _ 26)    }
  'bool'    { PT _ (TS _ 27)    }
  'char'    { PT _ (TS _ 28)    }
  'const'   { PT _ (TS _ 29)    }
  'double'  { PT _ (TS _ 30)    }
  'elif'    { PT _ (TS _ 31)    }
  'else'    { PT _ (TS _ 32)    }
  'if'      { PT _ (TS _ 33)    }
  'inline'  { PT _ (TS _ 34)    }
  'int'     { PT _ (TS _ 35)    }
  'return'  { PT _ (TS _ 36)    }
  'typedef' { PT _ (TS _ 37)    }
  'using'   { PT _ (TS _ 38)    }
  'void'    { PT _ (TS _ 39)    }
  'while'   { PT _ (TS _ 40)    }
  '{'       { PT _ (TS _ 41)    }
  '}'       { PT _ (TS _ 42)    }
  L_charac  { PT _ (TC $$)      }
  L_integ   { PT _ (TI $$)      }
  L_quoted  { PT _ (TL $$)      }
  L_Float   { PT _ (T_Float $$) }
  L_Id      { PT _ (T_Id $$)    }

%%

Char    :: { Char }
Char     : L_charac { (read $1) :: Char }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Float :: { AbsTest.Float }
Float  : L_Float { AbsTest.Float $1 }

Id :: { AbsTest.Id }
Id  : L_Id { AbsTest.Id $1 }

Program :: { AbsTest.Program }
Program : ListDef { AbsTest.PDefs $1 }

ListDef :: { [AbsTest.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Def :: { AbsTest.Def }
Def
  : Type Id '(' ListArg ')' '{' ListStm '}' { AbsTest.DFun $1 $2 $4 $7 }
  | 'inline' Type Id '(' ListArg ')' '{' ListStm '}' { AbsTest.DFunInline $2 $3 $5 $8 }
  | 'using' QualConst ';' { AbsTest.QCDef $2 }

ListArg :: { [AbsTest.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Arg :: { AbsTest.Arg }
Arg
  : Type { AbsTest.ADeclType $1 }
  | Type Id { AbsTest.ADeclId $1 $2 }
  | Type Id '=' Exp { AbsTest.ADeclInit $1 $2 $4 }

Stm :: { AbsTest.Stm }
Stm
  : Exp ';' { AbsTest.SExp $1 }
  | 'while' '(' Exp ')' Stm { AbsTest.SWhi $3 $5 }
  | 'typedef' Type Id ';' { AbsTest.STDef $2 $3 }
  | '{' ListStm '}' { AbsTest.SBlo $2 }
  | 'if' '(' Exp ')' Stm { AbsTest.SIf $3 $5 }
  | 'if' '(' Exp ')' Stm Else { AbsTest.SIfE $3 $5 $6 }
  | 'return' Exp ';' { AbsTest.SReturn $2 }
  | 'return' ';' { AbsTest.SReturnVoid }
  | Type Id ';' { AbsTest.SVDecl $1 $2 }
  | Type Id ',' ListId ';' { AbsTest.SVDecls $1 $2 $4 }
  | Type Id '=' Exp ';' { AbsTest.SVInits $1 $2 $4 }

Else :: { AbsTest.Else }
Else
  : 'elif' '(' Exp ')' Stm Else { AbsTest.SElIf $3 $5 $6 }
  | 'else' Stm { AbsTest.SElse $2 }

ListStm :: { [AbsTest.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Exp15 :: { AbsTest.Exp }
Exp15
  : Literal { AbsTest.ELit $1 }
  | String Exp15 { AbsTest.EStrLit $1 $2 }
  | QualConst { AbsTest.EQual $1 }
  | '(' Exp ')' { $2 }

Exp14 :: { AbsTest.Exp }
Exp14
  : Id '[' Exp ']' { AbsTest.EIdx $1 $3 }
  | Id '(' ListExp ')' { AbsTest.EFun $1 $3 }
  | Exp15 '.' Exp14 { AbsTest.EProD $1 $3 }
  | Exp15 '->' Exp14 { AbsTest.EProA $1 $3 }
  | Exp15 { $1 }

Exp12 :: { AbsTest.Exp }
Exp12
  : Exp12 '*' Exp13 { AbsTest.EMult $1 $3 }
  | Exp12 '/' Exp13 { AbsTest.EDiv $1 $3 }
  | Exp12 '%' Exp13 { AbsTest.ERem $1 $3 }
  | Exp13 { $1 }

Exp11 :: { AbsTest.Exp }
Exp11
  : Exp11 '+' Exp12 { AbsTest.EAdd $1 $3 }
  | Exp11 '-' Exp12 { AbsTest.ESub $1 $3 }
  | '-' Integer { AbsTest.ENegInt $2 }
  | Exp12 { $1 }

Exp10 :: { AbsTest.Exp }
Exp10
  : Exp10 '>>' Exp11 { AbsTest.EShiftR $1 $3 }
  | Exp10 '<<' Exp11 { AbsTest.EShiftL $1 $3 }
  | Exp11 { $1 }

Exp8 :: { AbsTest.Exp }
Exp8
  : Exp8 '==' Exp9 { AbsTest.EEqu $1 $3 }
  | Exp8 '!=' Exp9 { AbsTest.EIneq $1 $3 }
  | Exp9 { $1 }

Exp2 :: { AbsTest.Exp }
Exp2
  : Exp3 '=' Exp2 { AbsTest.EAsgn $1 $3 }
  | Exp3 '+=' Exp2 { AbsTest.EAsgnAdd $1 $3 }
  | Exp3 '-=' Exp2 { AbsTest.EAsgnSub $1 $3 }
  | Exp2 '?' Exp2 ':' Exp3 { AbsTest.ECond $1 $3 $5 }
  | Exp3 { $1 }

ListExp :: { [AbsTest.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

Exp :: { AbsTest.Exp }
Exp : Exp1 { $1 }

Exp1 :: { AbsTest.Exp }
Exp1 : Exp2 { $1 }

Exp3 :: { AbsTest.Exp }
Exp3 : Exp4 { $1 }

Exp4 :: { AbsTest.Exp }
Exp4 : Exp5 { $1 }

Exp5 :: { AbsTest.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { AbsTest.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { AbsTest.Exp }
Exp7 : Exp8 { $1 }

Exp9 :: { AbsTest.Exp }
Exp9 : Exp10 { $1 }

Exp13 :: { AbsTest.Exp }
Exp13 : Exp14 { $1 }

QualConst :: { AbsTest.QualConst }
QualConst
  : Id { AbsTest.QualConstId $1 }
  | QualConst '::' Id { AbsTest.QualConstRecId $1 $3 }
  | QualConst '::' TemplateInst { AbsTest.QualConstTem $1 $3 }

TemplateInst :: { AbsTest.TemplateInst }
TemplateInst : Id '<' ListType '>' { AbsTest.TempInst $1 $3 }

ListType :: { [AbsTest.Type] }
ListType
  : {- empty -} { [] }
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }

Type :: { AbsTest.Type }
Type
  : 'int' { AbsTest.Type_int }
  | 'bool' { AbsTest.Type_bool }
  | 'char' { AbsTest.Type_char }
  | 'double' { AbsTest.Type_double }
  | 'void' { AbsTest.Type_void }
  | QualConst { AbsTest.TypeQualConst $1 }
  | Type '&' { AbsTest.Type1 $1 }
  | 'const' Type { AbsTest.Type2 $2 }

Literal :: { AbsTest.Literal }
Literal
  : Integer { AbsTest.LiteralInteger $1 }
  | String { AbsTest.LiteralString $1 }
  | Char { AbsTest.LiteralChar $1 }
  | Float { AbsTest.LiteralFloat $1 }

ListId :: { [AbsTest.Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

