-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language test4.

module AbsTest where

import Prelude (Char, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = PDefs [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def
    = DFun Type Id [Arg] [Stm]
    | DFunInline Type Id [Arg] [Stm]
    | QCDef QualConst
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ADeclType Type | ADeclId Type Id | ADeclInit Type Id Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SExp Exp
    | SWhi Exp Stm
    | STDef Type Id
    | SBlo [Stm]
    | SIf Exp Stm
    | SIfE Exp Stm Else
    | SReturn Exp
    | SReturnVoid
    | SVDecl Type Id
    | SVDecls Type Id [Id]
    | SVInits Type Id Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Else = SElIf Exp Stm Else | SElse Stm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = ELit Literal
    | EStrLit String Exp
    | EQual QualConst
    | EIdx Id Exp
    | EFun Id [Exp]
    | EProD Exp Exp
    | EProA Exp Exp
    | EMult Exp Exp
    | EDiv Exp Exp
    | ERem Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ENegInt Integer
    | EShiftR Exp Exp
    | EShiftL Exp Exp
    | EEqu Exp Exp
    | EIneq Exp Exp
    | EAsgn Exp Exp
    | EAsgnAdd Exp Exp
    | EAsgnSub Exp Exp
    | ECond Exp Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data QualConst
    = QualConstId Id
    | QualConstRecId QualConst Id
    | QualConstTem QualConst TemplateInst
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TemplateInst = TempInst Id [Type]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = Type_int
    | Type_bool
    | Type_char
    | Type_double
    | Type_void
    | TypeQualConst QualConst
    | Type1 Type
    | Type2 Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Literal
    = LiteralInteger Integer
    | LiteralString String
    | LiteralChar Char
    | LiteralFloat Float
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Float = Float String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

