-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelTest where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsTest

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transFloat :: AbsTest.Float -> Result
transFloat x = case x of
  AbsTest.Float string -> failure x

transId :: AbsTest.Id -> Result
transId x = case x of
  AbsTest.Id string -> failure x

transProgram :: AbsTest.Program -> Result
transProgram x = case x of
  AbsTest.PDefs defs -> failure x

transDef :: AbsTest.Def -> Result
transDef x = case x of
  AbsTest.DFun type_ id args stms -> failure x
  AbsTest.DFunInline type_ id args stms -> failure x
  AbsTest.QCDef qualconst -> failure x

transArg :: AbsTest.Arg -> Result
transArg x = case x of
  AbsTest.ADeclType type_ -> failure x
  AbsTest.ADeclId type_ id -> failure x
  AbsTest.ADeclInit type_ id exp -> failure x

transStm :: AbsTest.Stm -> Result
transStm x = case x of
  AbsTest.SExp exp -> failure x
  AbsTest.SWhi exp stm -> failure x
  AbsTest.STDef type_ id -> failure x
  AbsTest.SBlo stms -> failure x
  AbsTest.SIf exp stm -> failure x
  AbsTest.SIfE exp stm else_ -> failure x
  AbsTest.SReturn exp -> failure x
  AbsTest.SReturnVoid -> failure x
  AbsTest.SVDecl type_ id -> failure x
  AbsTest.SVDecls type_ id ids -> failure x
  AbsTest.SVInits type_ id exp -> failure x

transElse :: AbsTest.Else -> Result
transElse x = case x of
  AbsTest.SElIf exp stm else_ -> failure x
  AbsTest.SElse stm -> failure x

transExp :: AbsTest.Exp -> Result
transExp x = case x of
  AbsTest.ELit literal -> failure x
  AbsTest.EStrLit string exp -> failure x
  AbsTest.EQual qualconst -> failure x
  AbsTest.EIdx id exp -> failure x
  AbsTest.EFun id exps -> failure x
  AbsTest.EProD exp1 exp2 -> failure x
  AbsTest.EProA exp1 exp2 -> failure x
  AbsTest.EMult exp1 exp2 -> failure x
  AbsTest.EDiv exp1 exp2 -> failure x
  AbsTest.ERem exp1 exp2 -> failure x
  AbsTest.EAdd exp1 exp2 -> failure x
  AbsTest.ESub exp1 exp2 -> failure x
  AbsTest.ENegInt integer -> failure x
  AbsTest.EShiftR exp1 exp2 -> failure x
  AbsTest.EShiftL exp1 exp2 -> failure x
  AbsTest.EEqu exp1 exp2 -> failure x
  AbsTest.EIneq exp1 exp2 -> failure x
  AbsTest.EAsgn id exp -> failure x
  AbsTest.EAsgnAdd id exp -> failure x
  AbsTest.EAsgnSub id exp -> failure x
  AbsTest.ECond exp1 exp2 exp3 -> failure x

transQualConst :: AbsTest.QualConst -> Result
transQualConst x = case x of
  AbsTest.QualConstId id -> failure x
  AbsTest.QualConstRecId qualconst id -> failure x
  AbsTest.QualConstTem qualconst templateinst -> failure x

transTemplateInst :: AbsTest.TemplateInst -> Result
transTemplateInst x = case x of
  AbsTest.TempInst id types -> failure x

transType :: AbsTest.Type -> Result
transType x = case x of
  AbsTest.Type_int -> failure x
  AbsTest.Type_bool -> failure x
  AbsTest.Type_char -> failure x
  AbsTest.Type_double -> failure x
  AbsTest.Type_void -> failure x
  AbsTest.TypeQualConst qualconst -> failure x
  AbsTest.Type1 type_ -> failure x
  AbsTest.Type2 type_ -> failure x

transLiteral :: AbsTest.Literal -> Result
transLiteral x = case x of
  AbsTest.LiteralInteger integer -> failure x
  AbsTest.LiteralString string -> failure x
  AbsTest.LiteralChar char -> failure x
  AbsTest.LiteralFloat float -> failure x
