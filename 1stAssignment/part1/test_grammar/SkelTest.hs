-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelTest where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsTest

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transChars :: AbsTest.Chars -> Result
transChars x = case x of
  AbsTest.Chars string -> failure x

transStrings :: AbsTest.Strings -> Result
transStrings x = case x of
  AbsTest.Strings string -> failure x

transIntegers :: AbsTest.Integers -> Result
transIntegers x = case x of
  AbsTest.Integers string -> failure x

transId :: AbsTest.Id -> Result
transId x = case x of
  AbsTest.Id string -> failure x

transProgram :: AbsTest.Program -> Result
transProgram x = case x of
  AbsTest.PDefs defs -> failure x

transDef :: AbsTest.Def -> Result
transDef x = case x of
  AbsTest.DFun type_ id args stms -> failure x

transArg :: AbsTest.Arg -> Result
transArg x = case x of
  AbsTest.ADeclType type_ -> failure x
  AbsTest.ADeclId type_ id -> failure x
  AbsTest.ADeclInit type_ id initialization -> failure x
  AbsTest.ADeclConst const type_ id -> failure x

transConst :: AbsTest.Const -> Result
transConst x = case x of
  AbsTest.Cst -> failure x

transInitialization :: AbsTest.Initialization -> Result
transInitialization x = case x of
  AbsTest.InitExp exp -> failure x
  AbsTest.InitLiteral literal -> failure x

transStm :: AbsTest.Stm -> Result
transStm x = case x of
  AbsTest.Sexp exp -> failure x
  AbsTest.SVarDecl var -> failure x
  AbsTest.SReturn exp -> failure x
  AbsTest.SReturnVoid -> failure x

transVar :: AbsTest.Var -> Result
transVar x = case x of
  AbsTest.VarDec -> failure x

transExp :: AbsTest.Exp -> Result
transExp x = case x of
  AbsTest.Elit literal -> failure x
  AbsTest.EQual qualconst -> failure x
  AbsTest.EShiftR exp1 exp2 -> failure x
  AbsTest.EShiftL exp1 exp2 -> failure x

transQualConst :: AbsTest.QualConst -> Result
transQualConst x = case x of
  AbsTest.QualConstId id -> failure x
  AbsTest.QualConstRecId qualconst id -> failure x
  AbsTest.QualConstTem qualconst templateinst -> failure x

transTemplateInst :: AbsTest.TemplateInst -> Result
transTemplateInst x = case x of
  AbsTest.TempInst id typelist -> failure x

transTypeList :: AbsTest.TypeList -> Result
transTypeList x = case x of
  AbsTest.TypList type_ -> failure x
  AbsTest.TypeListRec type_ typelist -> failure x

transType :: AbsTest.Type -> Result
transType x = case x of
  AbsTest.Tbool -> failure x
  AbsTest.Tdouble -> failure x
  AbsTest.Tint -> failure x
  AbsTest.Tvoid -> failure x
  AbsTest.Tchar -> failure x
  AbsTest.PlainIdent id -> failure x

transLiteral :: AbsTest.Literal -> Result
transLiteral x = case x of
  AbsTest.LiteralIntegers integers -> failure x
  AbsTest.LiteralStrings strings -> failure x
  AbsTest.LiteralChars chars -> failure x
