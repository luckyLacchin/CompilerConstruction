-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParTest
  ( happyError
  , myLexer
  , pProgram
  , pListDef
  , pDef
  , pListArg
  , pArg
  , pConst
  , pInitialization
  , pStm
  , pVar
  , pListStm
  , pExp15
  , pExp10
  , pExp
  , pExp1
  , pExp2
  , pExp3
  , pExp4
  , pExp5
  , pExp6
  , pExp7
  , pExp8
  , pExp9
  , pExp11
  , pExp12
  , pExp13
  , pExp14
  , pListExp
  , pQualConst
  , pTemplateInst
  , pTypeList
  , pType
  , pLiteral
  , pListId
  ) where

import Prelude

import qualified AbsTest
import LexTest

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pArg Arg
%name pConst Const
%name pInitialization Initialization
%name pStm Stm
%name pVar Var
%name pListStm ListStm
%name pExp15 Exp15
%name pExp10 Exp10
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp8 Exp8
%name pExp9 Exp9
%name pExp11 Exp11
%name pExp12 Exp12
%name pExp13 Exp13
%name pExp14 Exp14
%name pListExp ListExp
%name pQualConst QualConst
%name pTemplateInst TemplateInst
%name pTypeList TypeList
%name pType Type
%name pLiteral Literal
%name pListId ListId
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('        { PT _ (TS _ 1)        }
  ')'        { PT _ (TS _ 2)        }
  ','        { PT _ (TS _ 3)        }
  '::'       { PT _ (TS _ 4)        }
  ';'        { PT _ (TS _ 5)        }
  '<'        { PT _ (TS _ 6)        }
  '<<'       { PT _ (TS _ 7)        }
  '='        { PT _ (TS _ 8)        }
  '>'        { PT _ (TS _ 9)        }
  '>>'       { PT _ (TS _ 10)       }
  'bool'     { PT _ (TS _ 11)       }
  'char'     { PT _ (TS _ 12)       }
  'const'    { PT _ (TS _ 13)       }
  'double'   { PT _ (TS _ 14)       }
  'int'      { PT _ (TS _ 15)       }
  'return'   { PT _ (TS _ 16)       }
  'void'     { PT _ (TS _ 17)       }
  '{'        { PT _ (TS _ 18)       }
  '}'        { PT _ (TS _ 19)       }
  L_Chars    { PT _ (T_Chars $$)    }
  L_Strings  { PT _ (T_Strings $$)  }
  L_Integers { PT _ (T_Integers $$) }
  L_Id       { PT _ (T_Id $$)       }

%%

Chars :: { AbsTest.Chars }
Chars  : L_Chars { AbsTest.Chars $1 }

Strings :: { AbsTest.Strings }
Strings  : L_Strings { AbsTest.Strings $1 }

Integers :: { AbsTest.Integers }
Integers  : L_Integers { AbsTest.Integers $1 }

Id :: { AbsTest.Id }
Id  : L_Id { AbsTest.Id $1 }

Program :: { AbsTest.Program }
Program : ListDef { AbsTest.PDefs $1 }

ListDef :: { [AbsTest.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Def :: { AbsTest.Def }
Def
  : Type Id '(' ListArg ')' '{' ListStm '}' { AbsTest.DFun $1 $2 $4 $7 }

ListArg :: { [AbsTest.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Arg :: { AbsTest.Arg }
Arg
  : Type { AbsTest.ADeclType $1 }
  | Type Id { AbsTest.ADeclId $1 $2 }
  | Type Id Initialization { AbsTest.ADeclInit $1 $2 $3 }
  | Const Type Id { AbsTest.ADeclConst $1 $2 $3 }

Const :: { AbsTest.Const }
Const : 'const' { AbsTest.Cst }

Initialization :: { AbsTest.Initialization }
Initialization
  : '=' Exp { AbsTest.InitExp $2 }
  | '=' Literal { AbsTest.InitLiteral $2 }

Stm :: { AbsTest.Stm }
Stm
  : Exp ';' { AbsTest.Sexp $1 }
  | Var ';' { AbsTest.SVarDecl $1 }
  | 'return' Exp ';' { AbsTest.SReturn $2 }
  | 'return' ';' { AbsTest.SReturnVoid }

Var :: { AbsTest.Var }
Var : {- empty -} { AbsTest.VarDec }

ListStm :: { [AbsTest.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Exp15 :: { AbsTest.Exp }
Exp15
  : Literal { AbsTest.Elit $1 }
  | QualConst { AbsTest.EQual $1 }
  | '(' Exp ')' { $2 }

Exp10 :: { AbsTest.Exp }
Exp10
  : Exp10 '>>' Exp11 { AbsTest.EShiftR $1 $3 }
  | Exp10 '<<' Exp11 { AbsTest.EShiftL $1 $3 }
  | Exp11 { $1 }

Exp :: { AbsTest.Exp }
Exp : Exp1 { $1 }

Exp1 :: { AbsTest.Exp }
Exp1 : Exp2 { $1 }

Exp2 :: { AbsTest.Exp }
Exp2 : Exp3 { $1 }

Exp3 :: { AbsTest.Exp }
Exp3 : Exp4 { $1 }

Exp4 :: { AbsTest.Exp }
Exp4 : Exp5 { $1 }

Exp5 :: { AbsTest.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { AbsTest.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { AbsTest.Exp }
Exp7 : Exp8 { $1 }

Exp8 :: { AbsTest.Exp }
Exp8 : Exp9 { $1 }

Exp9 :: { AbsTest.Exp }
Exp9 : Exp10 { $1 }

Exp11 :: { AbsTest.Exp }
Exp11 : Exp12 { $1 }

Exp12 :: { AbsTest.Exp }
Exp12 : Exp13 { $1 }

Exp13 :: { AbsTest.Exp }
Exp13 : Exp14 { $1 }

Exp14 :: { AbsTest.Exp }
Exp14 : Exp15 { $1 }

ListExp :: { [AbsTest.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

QualConst :: { AbsTest.QualConst }
QualConst
  : Id { AbsTest.QualConstId $1 }
  | QualConst '::' Id { AbsTest.QualConstRecId $1 $3 }
  | QualConst '::' TemplateInst { AbsTest.QualConstTem $1 $3 }

TemplateInst :: { AbsTest.TemplateInst }
TemplateInst : Id '<' TypeList '>' { AbsTest.TempInst $1 $3 }

TypeList :: { AbsTest.TypeList }
TypeList
  : Type { AbsTest.TypList $1 }
  | Type ',' TypeList { AbsTest.TypeListRec $1 $3 }

Type :: { AbsTest.Type }
Type
  : 'bool' { AbsTest.Tbool }
  | 'double' { AbsTest.Tdouble }
  | 'int' { AbsTest.Tint }
  | 'void' { AbsTest.Tvoid }
  | 'char' { AbsTest.Tchar }
  | Id { AbsTest.PlainIdent $1 }

Literal :: { AbsTest.Literal }
Literal
  : Integers { AbsTest.LiteralIntegers $1 }
  | Strings { AbsTest.LiteralStrings $1 }
  | Chars { AbsTest.LiteralChars $1 }

ListId :: { [AbsTest.Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

