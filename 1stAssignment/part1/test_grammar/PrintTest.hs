-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintTest.

module PrintTest where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified AbsTest

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsTest.Chars where
  prt _ (AbsTest.Chars i) = doc $ showString i
instance Print AbsTest.Strings where
  prt _ (AbsTest.Strings i) = doc $ showString i
instance Print AbsTest.Integers where
  prt _ (AbsTest.Integers i) = doc $ showString i
instance Print AbsTest.Id where
  prt _ (AbsTest.Id i) = doc $ showString i
instance Print AbsTest.Program where
  prt i = \case
    AbsTest.PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print [AbsTest.Def] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsTest.Def where
  prt i = \case
    AbsTest.DFun type_ id_ args stms -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])

instance Print [AbsTest.Arg] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsTest.Arg where
  prt i = \case
    AbsTest.ADeclType type_ -> prPrec i 0 (concatD [prt 0 type_])
    AbsTest.ADeclId type_ id_ -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_])
    AbsTest.ADeclInit type_ id_ initialization -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, prt 0 initialization])
    AbsTest.ADeclConst const type_ id_ -> prPrec i 0 (concatD [prt 0 const, prt 0 type_, prt 0 id_])

instance Print AbsTest.Const where
  prt i = \case
    AbsTest.Cst -> prPrec i 0 (concatD [doc (showString "const")])

instance Print AbsTest.Initialization where
  prt i = \case
    AbsTest.InitExp exp -> prPrec i 0 (concatD [doc (showString "="), prt 0 exp])
    AbsTest.InitLiteral literal -> prPrec i 0 (concatD [doc (showString "="), prt 0 literal])

instance Print AbsTest.Stm where
  prt i = \case
    AbsTest.Sexp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    AbsTest.SVarDecl var -> prPrec i 0 (concatD [prt 0 var, doc (showString ";")])
    AbsTest.SReturn exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    AbsTest.SReturnVoid -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])

instance Print AbsTest.Var where
  prt i = \case
    AbsTest.VarDec -> prPrec i 0 (concatD [])

instance Print [AbsTest.Stm] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsTest.Exp where
  prt i = \case
    AbsTest.Elit literal -> prPrec i 15 (concatD [prt 0 literal])
    AbsTest.EQual qualconst -> prPrec i 15 (concatD [prt 0 qualconst])
    AbsTest.EShiftR exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    AbsTest.EShiftL exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])

instance Print [AbsTest.Exp] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsTest.QualConst where
  prt i = \case
    AbsTest.QualConstId id_ -> prPrec i 0 (concatD [prt 0 id_])
    AbsTest.QualConstRecId qualconst id_ -> prPrec i 0 (concatD [prt 0 qualconst, doc (showString "::"), prt 0 id_])
    AbsTest.QualConstTem qualconst templateinst -> prPrec i 0 (concatD [prt 0 qualconst, doc (showString "::"), prt 0 templateinst])

instance Print AbsTest.TemplateInst where
  prt i = \case
    AbsTest.TempInst id_ typelist -> prPrec i 0 (concatD [prt 0 id_, doc (showString "<"), prt 0 typelist, doc (showString ">")])

instance Print AbsTest.TypeList where
  prt i = \case
    AbsTest.TypList type_ -> prPrec i 0 (concatD [prt 0 type_])
    AbsTest.TypeListRec type_ typelist -> prPrec i 0 (concatD [prt 0 type_, doc (showString ","), prt 0 typelist])

instance Print AbsTest.Type where
  prt i = \case
    AbsTest.Tbool -> prPrec i 0 (concatD [doc (showString "bool")])
    AbsTest.Tdouble -> prPrec i 0 (concatD [doc (showString "double")])
    AbsTest.Tint -> prPrec i 0 (concatD [doc (showString "int")])
    AbsTest.Tvoid -> prPrec i 0 (concatD [doc (showString "void")])
    AbsTest.Tchar -> prPrec i 0 (concatD [doc (showString "char")])
    AbsTest.PlainIdent id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print AbsTest.Literal where
  prt i = \case
    AbsTest.LiteralIntegers integers -> prPrec i 0 (concatD [prt 0 integers])
    AbsTest.LiteralStrings strings -> prPrec i 0 (concatD [prt 0 strings])
    AbsTest.LiteralChars chars -> prPrec i 0 (concatD [prt 0 chars])

instance Print [AbsTest.Id] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
