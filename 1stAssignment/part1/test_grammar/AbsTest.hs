-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language test1.

module AbsTest where

import Prelude (String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = PDefs [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def = DFun Type Id [Arg] [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg
    = ADeclType Type
    | ADeclId Type Id
    | ADeclInit Type Id Initialization
    | ADeclConst Const Type Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Const = Cst
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Initialization = InitExp Exp | InitLiteral Literal
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm = Sexp Exp | SVarDecl Var | SReturn Exp | SReturnVoid
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Var = VarDec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = Elit Literal
    | EQual QualConst
    | EShiftR Exp Exp
    | EShiftL Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data QualConst
    = QualConstId Id
    | QualConstRecId QualConst Id
    | QualConstTem QualConst TemplateInst
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TemplateInst = TempInst Id TypeList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeList = TypList Type | TypeListRec Type TypeList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Tbool | Tdouble | Tint | Tvoid | Tchar | PlainIdent Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Literal
    = LiteralIntegers Integers
    | LiteralStrings Strings
    | LiteralChars Chars
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Chars = Chars String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Strings = Strings String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Integers = Integers String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

