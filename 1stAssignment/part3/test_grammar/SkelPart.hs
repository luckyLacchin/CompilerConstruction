-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelPart where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsPart

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transFloat :: AbsPart.Float -> Result
transFloat x = case x of
  AbsPart.Float string -> failure x

transId :: AbsPart.Id -> Result
transId x = case x of
  AbsPart.Id string -> failure x

transProgram :: AbsPart.Program -> Result
transProgram x = case x of
  AbsPart.PDefs defs -> failure x

transDef :: AbsPart.Def -> Result
transDef x = case x of
  AbsPart.DFun type_ id args stms -> failure x
  AbsPart.DFunInline type_ id args stms -> failure x
  AbsPart.QCDef qualconst -> failure x

transArg :: AbsPart.Arg -> Result
transArg x = case x of
  AbsPart.ADeclType type_ -> failure x
  AbsPart.ADeclId type_ id -> failure x
  AbsPart.ADeclInit type_ id exp -> failure x

transStm :: AbsPart.Stm -> Result
transStm x = case x of
  AbsPart.SExp exp -> failure x
  AbsPart.SWhi exp stm -> failure x
  AbsPart.STDef type_ id -> failure x
  AbsPart.SBlo stms -> failure x
  AbsPart.SIf exp stm -> failure x
  AbsPart.SIfE exp stm else_ -> failure x
  AbsPart.SReturn exp -> failure x
  AbsPart.SReturnVoid -> failure x
  AbsPart.SVDecl type_ id -> failure x
  AbsPart.SVDecls type_ id ids -> failure x
  AbsPart.SVInits type_ id exp -> failure x

transElse :: AbsPart.Else -> Result
transElse x = case x of
  AbsPart.SElIf exp stm else_ -> failure x
  AbsPart.SElse stm -> failure x

transExp :: AbsPart.Exp -> Result
transExp x = case x of
  AbsPart.ELit literal -> failure x
  AbsPart.EStrLit string exp -> failure x
  AbsPart.EQual qualconst -> failure x
  AbsPart.EIdx id exp -> failure x
  AbsPart.EFun id exps -> failure x
  AbsPart.EMult exp1 exp2 -> failure x
  AbsPart.EDiv exp1 exp2 -> failure x
  AbsPart.ERem exp1 exp2 -> failure x
  AbsPart.EAdd exp1 exp2 -> failure x
  AbsPart.ESub exp1 exp2 -> failure x
  AbsPart.EShiftR exp1 exp2 -> failure x
  AbsPart.EShiftL exp1 exp2 -> failure x
  AbsPart.EEqu exp1 exp2 -> failure x
  AbsPart.EIneq exp1 exp2 -> failure x
  AbsPart.EAsgn id exp -> failure x
  AbsPart.EAsgnAdd id exp -> failure x
  AbsPart.EAsgnSub id exp -> failure x
  AbsPart.ECond exp1 exp2 exp3 -> failure x

transQualConst :: AbsPart.QualConst -> Result
transQualConst x = case x of
  AbsPart.QualConstId id -> failure x
  AbsPart.QualConstRecId qualconst id -> failure x

transType :: AbsPart.Type -> Result
transType x = case x of
  AbsPart.Type_int -> failure x
  AbsPart.Type_bool -> failure x
  AbsPart.Type_char -> failure x
  AbsPart.Type_double -> failure x
  AbsPart.Type_void -> failure x
  AbsPart.TypeQualConst qualconst -> failure x

transLiteral :: AbsPart.Literal -> Result
transLiteral x = case x of
  AbsPart.LiteralInteger integer -> failure x
  AbsPart.LiteralString string -> failure x
  AbsPart.LiteralChar char -> failure x
  AbsPart.LiteralFloat float -> failure x
