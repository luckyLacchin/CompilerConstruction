-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParPart
  ( happyError
  , myLexer
  , pProgram
  , pListDef
  , pDef
  , pListArg
  , pArg
  , pStm
  , pElse
  , pListStm
  , pExp15
  , pExp14
  , pExp12
  , pExp11
  , pExp10
  , pExp8
  , pExp2
  , pListExp
  , pExp
  , pExp1
  , pExp3
  , pExp4
  , pExp5
  , pExp6
  , pExp7
  , pExp9
  , pExp13
  , pQualConst
  , pType
  , pLiteral
  , pListId
  ) where

import Prelude

import qualified AbsPart
import LexPart

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pArg Arg
%name pStm Stm
%name pElse Else
%name pListStm ListStm
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp8 Exp8
%name pExp2 Exp2
%name pListExp ListExp
%name pExp Exp
%name pExp1 Exp1
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp9 Exp9
%name pExp13 Exp13
%name pQualConst QualConst
%name pType Type
%name pLiteral Literal
%name pListId ListId
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!='      { PT _ (TS _ 1)     }
  '%'       { PT _ (TS _ 2)     }
  '('       { PT _ (TS _ 3)     }
  ')'       { PT _ (TS _ 4)     }
  '*'       { PT _ (TS _ 5)     }
  '+'       { PT _ (TS _ 6)     }
  '+='      { PT _ (TS _ 7)     }
  ','       { PT _ (TS _ 8)     }
  '-'       { PT _ (TS _ 9)     }
  '-='      { PT _ (TS _ 10)    }
  '/'       { PT _ (TS _ 11)    }
  ':'       { PT _ (TS _ 12)    }
  '::'      { PT _ (TS _ 13)    }
  ';'       { PT _ (TS _ 14)    }
  '<<'      { PT _ (TS _ 15)    }
  '='       { PT _ (TS _ 16)    }
  '=='      { PT _ (TS _ 17)    }
  '>>'      { PT _ (TS _ 18)    }
  '?'       { PT _ (TS _ 19)    }
  '['       { PT _ (TS _ 20)    }
  ']'       { PT _ (TS _ 21)    }
  'bool'    { PT _ (TS _ 22)    }
  'char'    { PT _ (TS _ 23)    }
  'double'  { PT _ (TS _ 24)    }
  'elif'    { PT _ (TS _ 25)    }
  'else'    { PT _ (TS _ 26)    }
  'if'      { PT _ (TS _ 27)    }
  'inline'  { PT _ (TS _ 28)    }
  'int'     { PT _ (TS _ 29)    }
  'return'  { PT _ (TS _ 30)    }
  'typedef' { PT _ (TS _ 31)    }
  'using'   { PT _ (TS _ 32)    }
  'void'    { PT _ (TS _ 33)    }
  'while'   { PT _ (TS _ 34)    }
  '{'       { PT _ (TS _ 35)    }
  '}'       { PT _ (TS _ 36)    }
  L_charac  { PT _ (TC $$)      }
  L_integ   { PT _ (TI $$)      }
  L_quoted  { PT _ (TL $$)      }
  L_Float   { PT _ (T_Float $$) }
  L_Id      { PT _ (T_Id $$)    }

%%

Char    :: { Char }
Char     : L_charac { (read $1) :: Char }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Float :: { AbsPart.Float }
Float  : L_Float { AbsPart.Float $1 }

Id :: { AbsPart.Id }
Id  : L_Id { AbsPart.Id $1 }

Program :: { AbsPart.Program }
Program : ListDef { AbsPart.PDefs $1 }

ListDef :: { [AbsPart.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Def :: { AbsPart.Def }
Def
  : Type Id '(' ListArg ')' '{' ListStm '}' { AbsPart.DFun $1 $2 $4 $7 }
  | 'inline' Type Id '(' ListArg ')' '{' ListStm '}' { AbsPart.DFunInline $2 $3 $5 $8 }
  | 'using' QualConst ';' { AbsPart.QCDef $2 }

ListArg :: { [AbsPart.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Arg :: { AbsPart.Arg }
Arg
  : Type { AbsPart.ADeclType $1 }
  | Type Id { AbsPart.ADeclId $1 $2 }
  | Type Id '=' Exp { AbsPart.ADeclInit $1 $2 $4 }

Stm :: { AbsPart.Stm }
Stm
  : Exp ';' { AbsPart.SExp $1 }
  | 'while' '(' Exp ')' Stm { AbsPart.SWhi $3 $5 }
  | 'typedef' Type Id ';' { AbsPart.STDef $2 $3 }
  | '{' ListStm '}' { AbsPart.SBlo $2 }
  | 'if' '(' Exp ')' Stm { AbsPart.SIf $3 $5 }
  | 'if' '(' Exp ')' Stm Else { AbsPart.SIfE $3 $5 $6 }
  | 'return' Exp ';' { AbsPart.SReturn $2 }
  | 'return' ';' { AbsPart.SReturnVoid }
  | Type Id ';' { AbsPart.SVDecl $1 $2 }
  | Type Id ',' ListId ';' { AbsPart.SVDecls $1 $2 $4 }
  | Type Id '=' Exp ';' { AbsPart.SVInits $1 $2 $4 }

Else :: { AbsPart.Else }
Else
  : 'elif' '(' Exp ')' Stm Else { AbsPart.SElIf $3 $5 $6 }
  | 'else' Stm { AbsPart.SElse $2 }

ListStm :: { [AbsPart.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Exp15 :: { AbsPart.Exp }
Exp15
  : Literal { AbsPart.ELit $1 }
  | String Exp15 { AbsPart.EStrLit $1 $2 }
  | QualConst { AbsPart.EQual $1 }
  | '(' Exp ')' { $2 }

Exp14 :: { AbsPart.Exp }
Exp14
  : Id '[' Exp ']' { AbsPart.EIdx $1 $3 }
  | Id '(' ListExp ')' { AbsPart.EFun $1 $3 }
  | Exp15 { $1 }

Exp12 :: { AbsPart.Exp }
Exp12
  : Exp12 '*' Exp13 { AbsPart.EMult $1 $3 }
  | Exp12 '/' Exp13 { AbsPart.EDiv $1 $3 }
  | Exp12 '%' Exp13 { AbsPart.ERem $1 $3 }
  | Exp13 { $1 }

Exp11 :: { AbsPart.Exp }
Exp11
  : Exp11 '+' Exp12 { AbsPart.EAdd $1 $3 }
  | Exp11 '-' Exp12 { AbsPart.ESub $1 $3 }
  | Exp12 { $1 }

Exp10 :: { AbsPart.Exp }
Exp10
  : Exp10 '>>' Exp11 { AbsPart.EShiftR $1 $3 }
  | Exp10 '<<' Exp11 { AbsPart.EShiftL $1 $3 }
  | Exp11 { $1 }

Exp8 :: { AbsPart.Exp }
Exp8
  : Exp8 '==' Exp9 { AbsPart.EEqu $1 $3 }
  | Exp8 '!=' Exp9 { AbsPart.EIneq $1 $3 }
  | Exp9 { $1 }

Exp2 :: { AbsPart.Exp }
Exp2
  : Id '=' Exp3 { AbsPart.EAsgn $1 $3 }
  | Id '+=' Exp3 { AbsPart.EAsgnAdd $1 $3 }
  | Id '-=' Exp3 { AbsPart.EAsgnSub $1 $3 }
  | Exp2 '?' Exp2 ':' Exp3 { AbsPart.ECond $1 $3 $5 }
  | Exp3 { $1 }

ListExp :: { [AbsPart.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

Exp :: { AbsPart.Exp }
Exp : Exp1 { $1 }

Exp1 :: { AbsPart.Exp }
Exp1 : Exp2 { $1 }

Exp3 :: { AbsPart.Exp }
Exp3 : Exp4 { $1 }

Exp4 :: { AbsPart.Exp }
Exp4 : Exp5 { $1 }

Exp5 :: { AbsPart.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { AbsPart.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { AbsPart.Exp }
Exp7 : Exp8 { $1 }

Exp9 :: { AbsPart.Exp }
Exp9 : Exp10 { $1 }

Exp13 :: { AbsPart.Exp }
Exp13 : Exp14 { $1 }

QualConst :: { AbsPart.QualConst }
QualConst
  : Id { AbsPart.QualConstId $1 }
  | QualConst '::' Id { AbsPart.QualConstRecId $1 $3 }

Type :: { AbsPart.Type }
Type
  : 'int' { AbsPart.Type_int }
  | 'bool' { AbsPart.Type_bool }
  | 'char' { AbsPart.Type_char }
  | 'double' { AbsPart.Type_double }
  | 'void' { AbsPart.Type_void }
  | QualConst { AbsPart.TypeQualConst $1 }

Literal :: { AbsPart.Literal }
Literal
  : Integer { AbsPart.LiteralInteger $1 }
  | String { AbsPart.LiteralString $1 }
  | Char { AbsPart.LiteralChar $1 }
  | Float { AbsPart.LiteralFloat $1 }

ListId :: { [AbsPart.Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

