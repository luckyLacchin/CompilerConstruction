-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintPart.

module PrintPart where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified AbsPart

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsPart.Float where
  prt _ (AbsPart.Float i) = doc $ showString i
instance Print AbsPart.Id where
  prt _ (AbsPart.Id i) = doc $ showString i
instance Print AbsPart.Program where
  prt i = \case
    AbsPart.PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print [AbsPart.Def] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsPart.Def where
  prt i = \case
    AbsPart.DFun type_ id_ args stms -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    AbsPart.DFunInline type_ id_ args stms -> prPrec i 0 (concatD [doc (showString "inline"), prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    AbsPart.QCDef qualconst -> prPrec i 0 (concatD [doc (showString "using"), prt 0 qualconst, doc (showString ";")])

instance Print [AbsPart.Arg] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsPart.Arg where
  prt i = \case
    AbsPart.ADeclType type_ -> prPrec i 0 (concatD [prt 0 type_])
    AbsPart.ADeclId type_ id_ -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_])
    AbsPart.ADeclInit type_ id_ exp -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "="), prt 0 exp])

instance Print AbsPart.Stm where
  prt i = \case
    AbsPart.SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    AbsPart.SWhi exp stm -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    AbsPart.STDef type_ id_ -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 type_, prt 0 id_, doc (showString ";")])
    AbsPart.SBlo stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    AbsPart.SIf exp stm -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    AbsPart.SIfE exp stm else_ -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm, prt 0 else_])
    AbsPart.SReturn exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    AbsPart.SReturnVoid -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    AbsPart.SVDecl type_ id_ -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString ";")])
    AbsPart.SVDecls type_ id_ ids -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString ","), prt 0 ids, doc (showString ";")])
    AbsPart.SVInits type_ id_ exp -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "="), prt 0 exp, doc (showString ";")])

instance Print AbsPart.Else where
  prt i = \case
    AbsPart.SElIf exp stm else_ -> prPrec i 0 (concatD [doc (showString "elif"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm, prt 0 else_])
    AbsPart.SElse stm -> prPrec i 0 (concatD [doc (showString "else"), prt 0 stm])

instance Print [AbsPart.Stm] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsPart.Exp where
  prt i = \case
    AbsPart.ELit literal -> prPrec i 15 (concatD [prt 0 literal])
    AbsPart.EStrLit str exp -> prPrec i 15 (concatD [printString str, prt 15 exp])
    AbsPart.EQual qualconst -> prPrec i 15 (concatD [prt 0 qualconst])
    AbsPart.EIdx id_ exp -> prPrec i 14 (concatD [prt 0 id_, doc (showString "["), prt 0 exp, doc (showString "]")])
    AbsPart.EFun id_ exps -> prPrec i 14 (concatD [prt 0 id_, doc (showString "("), prt 0 exps, doc (showString ")")])
    AbsPart.EProD exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "."), prt 15 exp2])
    AbsPart.EProA exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "->"), prt 15 exp2])
    AbsPart.EMult exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    AbsPart.EDiv exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    AbsPart.ERem exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "%"), prt 13 exp2])
    AbsPart.EAdd exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    AbsPart.ESub exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    AbsPart.EShiftR exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    AbsPart.EShiftL exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    AbsPart.EEqu exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    AbsPart.EIneq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    AbsPart.EAsgn id_ exp -> prPrec i 2 (concatD [prt 0 id_, doc (showString "="), prt 3 exp])
    AbsPart.EAsgnAdd id_ exp -> prPrec i 2 (concatD [prt 0 id_, doc (showString "+="), prt 3 exp])
    AbsPart.EAsgnSub id_ exp -> prPrec i 2 (concatD [prt 0 id_, doc (showString "-="), prt 3 exp])
    AbsPart.ECond exp1 exp2 exp3 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "?"), prt 2 exp2, doc (showString ":"), prt 3 exp3])

instance Print [AbsPart.Exp] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsPart.QualConst where
  prt i = \case
    AbsPart.QualConstId id_ -> prPrec i 0 (concatD [prt 0 id_])
    AbsPart.QualConstRecId qualconst id_ -> prPrec i 0 (concatD [prt 0 qualconst, doc (showString "::"), prt 0 id_])

instance Print AbsPart.Type where
  prt i = \case
    AbsPart.Type_int -> prPrec i 0 (concatD [doc (showString "int")])
    AbsPart.Type_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    AbsPart.Type_char -> prPrec i 0 (concatD [doc (showString "char")])
    AbsPart.Type_double -> prPrec i 0 (concatD [doc (showString "double")])
    AbsPart.Type_void -> prPrec i 0 (concatD [doc (showString "void")])
    AbsPart.TypeQualConst qualconst -> prPrec i 0 (concatD [prt 0 qualconst])

instance Print AbsPart.Literal where
  prt i = \case
    AbsPart.LiteralInteger n -> prPrec i 0 (concatD [prt 0 n])
    AbsPart.LiteralString str -> prPrec i 0 (concatD [printString str])
    AbsPart.LiteralChar c -> prPrec i 0 (concatD [prt 0 c])
    AbsPart.LiteralFloat float -> prPrec i 0 (concatD [prt 0 float])

instance Print [AbsPart.Id] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
